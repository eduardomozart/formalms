<style>

    .add-classroom-dates {
        display: none;
    }

    .add-classroom-dates .col-box-end-button {
        display: flex;
        align-items: flex-end;
    }

    .add-classroom-dates .col-box-end-button .box-classroom {

        align-items: center;
        margin-right: 15px;
    }

    .add-classroom-dates .btn {
        border-radius: 8px;
    }

    .add-classroom-dates .btn-save {
        background: #2D8CFF;
        color: white;
    }

    .add-classroom-dates .btn-delete {
        background: transparent;
        color: #2D8CFF;
    }

    .add-classroom-dates .select-box {
        margin-left: 5px;
    }

    .edit-classroom-dates .edit-classroom-dates--new-date {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 10px;
    }

    .edit-classroom-dates .edit-classroom-dates--new-date p {
        color: #2D8CFF;
        cursor: pointer;
    }

    .input-not-valid {
        border-color: red;
        /* insert your own styles for valid form input */
    }

</style>


<div class="std_block">
    <div class="container">
        {% set courseUrl = 'index.php?r=' ~ courseBaseLink ~ '/show' %}

        {% set classUrl = 'index.php?r=' ~ classroomBaseLink ~ '/classroom&id_course=' ~ idCourse %}

        {% set title = Lang_translate('_MOD_DATES', 'course') ~ ': ' ~ postData.name %}

        {% if postdata.dateBegin is not empty %}
            {% set title = title ~ ' (' ~ postData.dateBegin ~ ')' %}
        {% endif %}

        {{ Get_title(
            {
                (courseUrl) : Lang_translate('_COURSE', 'course'),
                (classUrl) : Lang_translate('_CLASSROOM', 'course'),
                '': title
            },false) }}

        {% if error %}
            {% set errorTranslate = Lang_translate((error), 'course') %}
            {{ UiFeedback_error(errorTranslate) }}
        {% endif %}


        <div class="edit-classroom-dates">

            <div id="js-row-hidden" class="hidden">
                <!--<tr data-day_id="#day_id#" data-date="#dataset_day_date#" data-date_begin="#dataset_day_date_begin#" data-date_end="#dataset_day_date_end#" data-pause_begin="#dataset_day_pause_begin#" data-pause_end="#dataset_day_pause_end#" data-classroom="#dataset_day_classroom#">
                    <th scope="row">#day_date#</th>
                    <td>#day_date_begin#</td>
                    <td>#day_date_end#</td>
                    <td>#day_pause_begin#</td>
                    <td>#day_pause_end#</td>
                    <td>#day_classroom#</td>
                    <td><a class="js-edit" href="javascript:void(0)" >Edit</a></td>
                    <td><a class="js-delete" href="javascript:void(0)" >Delete</a></td>
                </tr>-->
            </div>

            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Ora inizio</th>
                    <th scope="col">Ora fine</th>
                    <th scope="col">Ora inizio pausa</th>
                    <th scope="col">Ora fine pausa</th>
                    <th scope="col">Classe</th>
                </tr>
                </thead>
                <tbody id="js-table-body">
                {% for day in postData.days %}
                    {% if day.classroom in availableClassrooms|keys %}
                        {% set classroom = availableClassrooms[day.classroom] %}
                    {% endif %}

                    <tr data-day_id="{{ day.id }}" data-date="{{ day.date }}" data-date_begin="{{ day.date_begin }}"
                        data-date_end="{{ day.date_end }}" data-pause_begin="{{ day.pause_begin }}"
                        data-pause_end="{{ day.pause_end }}" data-classroom="{{ day.classroom }}">
                        <th scope="row">{{ day.date }}</th>
                        <td>{{ day.date_begin|date("H:i") }}</td>
                        <td>{{ day.date_end|date("H:i") }}</td>
                        <td>{{ day.pause_begin|date("H:i") }}</td>
                        <td>{{ day.pause_end|date("H:i") }}</td>
                        <td>{{ classroom|raw }}</td>
                        <td><a class="js-edit" href="javascript:void(0)">Edit</a></td>
                        <td><a class="js-delete" href="javascript:void(0)" data-swal-toast-template="#my-template">Delete</a>
                        </td>
                    </tr>
                {% endfor %}

                </tbody>
            </table>
            <div class="edit-classroom-dates--new-date">
                <div class="edit-classroom-dates--new-date-box">
                    <p id="js-button-new-row">Inserisci una nuova riga</p>
                </div>
            </div>
        </div>


        <div class="add-classroom-dates" id="js-add-classroom-dates" style="display: none">
            <div class="row mb-4">
                <input type="hidden" id="form-day_id">
                <div class="col">
                    <div class="form-outline">
                        <label for="form-day_date">Date</label>
                        <input class="form-control" id="form-day_date" type="date" required>
                    </div>
                </div>
                <div class="col">
                    <div class="form-outline">
                        <label class="form-label" for="form-day_date_begin">Ora inizio</label>
                        <input value="00:00" type="time" id="form-day_date_begin" class="form-control"/>
                    </div>
                </div>
                <div class="col">
                    <div class="form-outline">
                        <label class="form-label" for="form-day_date_end">Ora fine</label>
                        <input type="time" value="00:00" id="form-day_date_end" class="form-control"/>
                    </div>
                </div>
                <div class="col">
                    <div class="form-outline">
                        <label class="form-label" for="form-day_pause_begin">Ora inizio pausa</label>
                        <input type="time" value="00:00" id="form-day_pause_begin" class="form-control"/>
                    </div>
                </div>
                <div class="col">
                    <div class="form-outline">
                        <label class="form-label" for="form-day_pause_end">Ora fine pausa</label>
                        <input type="time" value="00:00" id="form-day_pause_end" class="form-control"/>
                    </div>
                </div>
                <div class="col col-box-end-button">
                    <div class="form-outline box-classroom">
                        <label for="form-day_classroom">Classrom</label>
                        <select class="form-control select-box" id="form-day_classroom">

                            {% for id,classroom in availableClassrooms %}
                                <option value="{{ id }}">{{ classroom|raw }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-outline">
                        <button class="btn btn-save" id="js-classroom-dates-save">Save</button>
                        <button class="btn btn-delete" id="js-classroom-dates-delete">Delete</button>
                    </div>
                </div>
            </div>
        </div>


        {{ Form_openButtonSpace() }}
        {{ Form_getButton('js-undo', 'undo', Lang_translate('_UNDO', 'course')) }}
        {{ Form_getButton('js-save', 'save', Lang_translate('_SAVE', 'course')) }}
        {{ Form_closeElementSpace() }}

    </div>
</div>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script type="text/javascript">

    var availableClassrooms = {{ availableClassrooms|json_encode|raw }}
    var lastInsertedRowId = -1;
    var insertedDays = [];
    var removedDays = [];

    loadInsertedDays();

    function loadInsertedDays() {
        insertedDays = [];
        rows = getTableBody().rows

        for (let row of rows) {
            insertedDays.push(row.dataset.date);
        }
    }

    document.getElementById('js-button-new-row').addEventListener('click', function (e) {
        showForm(e)
        clearForm()
    })

    for (let item of document.getElementsByClassName('js-edit')) {
        item.addEventListener('click', editRow);
    }

    for (let item of document.getElementsByClassName('js-delete')) {
        item.addEventListener('click', deleteRow);
    }

    document.getElementById('js-save').addEventListener('click', saveData);

    document.getElementById('js-undo').addEventListener('click', goBack)

    document.getElementById('js-classroom-dates-save').addEventListener('click', saveForm);

    document.getElementById('js-classroom-dates-delete').addEventListener('click', hideForm);

    function saveForm(e) {
        e.preventDefault();
        var id = document.getElementById('form-day_id').value;
        var date = document.getElementById('form-day_date').value;
        var dateFormatted = formattedDate(new Date(date));
        var dateBegin = document.getElementById('form-day_date_begin').value;
        var dateEnd = document.getElementById('form-day_date_end').value;
        var pauseBegin = document.getElementById('form-day_pause_begin').value;
        var pauseEnd = document.getElementById('form-day_pause_end').value;
        var classroom = document.getElementById('form-day_classroom').value;

        if (date === '') {
            document.getElementById('form-day_date').classList.add('input-not-valid');
            return;
        }
        if (insertedDays.includes(dateFormatted)) {
            showError('Data gi√† presente');
            return;
        }

        document.getElementById('form-day_date').classList.remove('input-not-valid');

        insertOrUpdateRow(id,date,dateFormatted,dateBegin,dateEnd,pauseBegin,pauseEnd,classroom);
        clearForm();
        loadInsertedDays();
    }

    function insertOrUpdateRow(id,date,dateFormatted,dateBegin,dateEnd,pauseBegin,pauseEnd,classroom) {
        var tableBody = getTableBody();

        var newTableRow = document.getElementById('js-row-hidden').innerHTML;
        newTableRow = newTableRow.replace('<!--', '').replace('-->', '');
        newTableRow = newTableRow.replace('#day_date#', dateFormatted).replace('#dataset_day_date#', dateFormatted);
        newTableRow = newTableRow.replace('#day_date_begin#', dateBegin).replace('#dataset_day_date_begin#', date + ' ' + dateBegin);
        newTableRow = newTableRow.replace('#day_date_end#', dateEnd).replace('#dataset_day_date_end#', date + ' ' + dateEnd);
        newTableRow = newTableRow.replace('#day_pause_begin#', pauseBegin).replace('#dataset_day_pause_begin#', date + ' ' + pauseBegin);
        newTableRow = newTableRow.replace('#day_pause_end#', pauseEnd).replace('#dataset_day_pause_end#', date + ' ' + pauseEnd);
        newTableRow = newTableRow.replace('#day_classroom#', availableClassrooms[classroom]).replace('#dataset_day_classroom#', classroom);

        if (typeof id !== 'undefined' && id !== '' || insertedDays.includes(dateFormatted)) {

            for (let row of tableBody.rows) {
                var dataset = row.dataset;

                if (dataset.day_id === id) {
                    newTableRow = newTableRow.replace('#day_id#', id);
                    row.innerHTML = newTableRow;
                    row.dataset.day_id = id;
                    row.dataset.date = dateFormatted;
                    row.dataset.date_begin = date + ' ' + dateBegin;
                    row.dataset.date_end = date + ' ' + dateEnd;
                    row.dataset.pause_begin = date + ' ' + pauseBegin;
                    row.dataset.pause_end = date + ' ' + pauseEnd;
                    row.dataset.classroom = classroom;

                    jsEdit = row.getElementsByClassName('js-edit');
                    jsDelete = row.getElementsByClassName('js-delete');

                    for (let item of jsEdit) {
                        item.addEventListener('click', editRow);
                    }

                    for (let item of jsDelete) {
                        item.addEventListener('click', deleteRow);
                    }
                }
            }
        } else {

            newTableRow = newTableRow.replace('#day_id#', lastInsertedRowId);
            lastInsertedRowId--;
            tableBody.insertAdjacentHTML('beforeend', newTableRow);

            var lastRow = tableBody.rows.item(tableBody.rows.length - 1);

            var jsEdit = lastRow.getElementsByClassName('js-edit');
            var jsDelete = lastRow.getElementsByClassName('js-delete');

            for (let item of jsEdit) {
                item.addEventListener('click', editRow)
            }

            for (let item of jsDelete) {
                item.addEventListener('click', deleteRow)
            }
        }
    }

    function hideForm(e) {
        e.preventDefault()
        var editClassroomDate = document.getElementById('js-add-classroom-dates');
        editClassroomDate.style.display = 'none';
    }

    function showForm(e) {
        e.preventDefault()
        var editClassroomDate = document.getElementById('js-add-classroom-dates');
        editClassroomDate.style.display = 'block';
    }

    function clearForm() {
        document.getElementById('form-day_id').value = '';
        document.getElementById('form-day_date').value = '';
        document.getElementById('form-day_date_begin').value = '00:00';
        document.getElementById('form-day_date_end').value = '00:00';
        document.getElementById('form-day_pause_begin').value = '00:00';
        document.getElementById('form-day_pause_end').value = '00:00';
        document.getElementById('form-day_classroom').value = Object.keys(availableClassrooms)[0];
    }

    function saveData(e) {
        e.preventDefault();

        var postData = [];
        var rows = getTableBody().rows;

        for (let row of rows) {

            postData.push(JSON.parse(JSON.stringify(row.dataset)));
        }

        $.ajax({
            type: "post",
            url: "{{ actions.save|raw }}",
            data: {
                'data': postData,
                'removedDays' : removedDays
            },
            beforeSend: function () {

            },
            success: function (data) {
                data = JSON.parse(data);

                if (data.success){
                    for(let day of data.days ){
                        date = day.date_begin.split(" ");
                        if (date.length > 1) {
                            day.date_begin = date[1].substring(0, 5);
                        }
                        date = rowData.date_end.split(" ");
                        if (date.length > 1) {
                            day.date_end = date[1].substring(0, 5);
                        }
                        date = rowData.pause_begin.split(" ");
                        if (date.length > 1) {
                            day.pause_begin = date[1].substring(0, 5);
                        }
                        date = rowData.pause_end.split(" ");
                        if (date.length > 1) {
                            day.pause_end = date[1].substring(0, 5);
                        }

                        insertOrUpdateRow(day.id,day.date,formattedDate(new Date(day.date)),day.date_begin,day.date_end,day.pause_begin,day.pause_end,day.classroom)
                    }
                }
            },
            complete: function () {
            },
            error: function (e) {
                return false;
            }
        });
    }

    function goBack(e) {
        window.location = '{{ actions.back|raw }}';
    }

    function getTableBody() {
        return document.getElementById("js-table-body");
    }

    function editRow(e) {
        showForm(e);

        var rowData = getRowDatasetFromEvent(e);

        document.getElementById('form-day_id').value = rowData.day_id;

        /** convert date string to date object (date string format 01-07-2021) */
        var date = stringToDate(rowData.date, 'dd-MM-yyyy', '-');
        date.setHours(date.getHours() + 2);

        document.getElementById('form-day_date').valueAsDate = date;

        /** split date_begin string to use only time */
        date = rowData.date_begin.split(" ");
        if (date.length > 1) {
            document.getElementById('form-day_date_begin').value = date[1].substring(0, 5);
        }
        date = rowData.date_end.split(" ");
        if (date.length > 1) {
            document.getElementById('form-day_date_end').value = date[1].substring(0, 5);
        }
        date = rowData.pause_begin.split(" ");
        if (date.length > 1) {
            document.getElementById('form-day_pause_begin').value = date[1].substring(0, 5);
        }
        date = rowData.pause_end.split(" ");
        if (date.length > 1) {
            document.getElementById('form-day_pause_end').value = date[1].substring(0, 5);
        }
        document.getElementById('form-day_classroom').value = rowData.classroom;
    }

    function deleteRow(e) {
        e.preventDefault()
        var row = e.target.parentNode.parentNode
        if (row.dataset.day_id > 0){
            removedDays.push(JSON.parse(JSON.stringify(row.dataset)));
            insertedDays.pop(row.dataset.date);
        }
        row.remove();
    }

    function getRowDatasetFromEvent(e) {
        var row = e.target.parentNode.parentNode;
        return row.dataset;
    }

    function formattedDate(d = new Date) {
        let month = String(d.getMonth() + 1);
        let day = String(d.getDate());
        const year = String(d.getFullYear());

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return `${day}-${month}-${year}`;
    }

    function stringToDate(_date, _format, _delimiter) {
        var formatLowerCase = _format.toLowerCase();
        var formatItems = formatLowerCase.split(_delimiter);
        var dateItems = _date.split(_delimiter);
        var monthIndex = formatItems.indexOf("mm");
        var dayIndex = formatItems.indexOf("dd");
        var yearIndex = formatItems.indexOf("yyyy");
        var month = parseInt(dateItems[monthIndex]);
        month -= 1;
        return new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
    }

    function showError(text) {
        Swal.fire({
            title: text,
            icon: 'error',
        })
    }

    function showSuccess(text) {
        Swal.fire({
            title: text,
            icon: 'success',
        })
    }

</script>
